// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: initialize.proto

#ifndef PROTOBUF_initialize_2eproto__INCLUDED
#define PROTOBUF_initialize_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_initialize_2eproto();
void protobuf_AssignDesc_initialize_2eproto();
void protobuf_ShutdownFile_initialize_2eproto();

class BINInitializeRequest;
class BINInitializeResponse;

// ===================================================================

class BINInitializeRequest : public ::google::protobuf::Message {
 public:
  BINInitializeRequest();
  virtual ~BINInitializeRequest();

  BINInitializeRequest(const BINInitializeRequest& from);

  inline BINInitializeRequest& operator=(const BINInitializeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINInitializeRequest& default_instance();

  void Swap(BINInitializeRequest* other);

  // implements Message ----------------------------------------------

  BINInitializeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINInitializeRequest& from);
  void MergeFrom(const BINInitializeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cp = 1;
  inline bool has_cp() const;
  inline void clear_cp();
  static const int kCpFieldNumber = 1;
  inline const ::std::string& cp() const;
  inline void set_cp(const ::std::string& value);
  inline void set_cp(const char* value);
  inline void set_cp(const char* value, size_t size);
  inline ::std::string* mutable_cp();
  inline ::std::string* release_cp();
  inline void set_allocated_cp(::std::string* cp);

  // required string appVersion = 2;
  inline bool has_appversion() const;
  inline void clear_appversion();
  static const int kAppVersionFieldNumber = 2;
  inline const ::std::string& appversion() const;
  inline void set_appversion(const ::std::string& value);
  inline void set_appversion(const char* value);
  inline void set_appversion(const char* value, size_t size);
  inline ::std::string* mutable_appversion();
  inline ::std::string* release_appversion();
  inline void set_allocated_appversion(::std::string* appversion);

  // optional string deviceId = 3;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 3;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional string deviceInfo = 4;
  inline bool has_deviceinfo() const;
  inline void clear_deviceinfo();
  static const int kDeviceInfoFieldNumber = 4;
  inline const ::std::string& deviceinfo() const;
  inline void set_deviceinfo(const ::std::string& value);
  inline void set_deviceinfo(const char* value);
  inline void set_deviceinfo(const char* value, size_t size);
  inline ::std::string* mutable_deviceinfo();
  inline ::std::string* release_deviceinfo();
  inline void set_allocated_deviceinfo(::std::string* deviceinfo);

  // optional string country = 5;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 5;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // optional string language = 6;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 6;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // optional string pakageName = 7;
  inline bool has_pakagename() const;
  inline void clear_pakagename();
  static const int kPakageNameFieldNumber = 7;
  inline const ::std::string& pakagename() const;
  inline void set_pakagename(const ::std::string& value);
  inline void set_pakagename(const char* value);
  inline void set_pakagename(const char* value, size_t size);
  inline ::std::string* mutable_pakagename();
  inline ::std::string* release_pakagename();
  inline void set_allocated_pakagename(::std::string* pakagename);

  // @@protoc_insertion_point(class_scope:BINInitializeRequest)
 private:
  inline void set_has_cp();
  inline void clear_has_cp();
  inline void set_has_appversion();
  inline void clear_has_appversion();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_deviceinfo();
  inline void clear_has_deviceinfo();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_pakagename();
  inline void clear_has_pakagename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cp_;
  ::std::string* appversion_;
  ::std::string* deviceid_;
  ::std::string* deviceinfo_;
  ::std::string* country_;
  ::std::string* language_;
  ::std::string* pakagename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_initialize_2eproto();
  friend void protobuf_AssignDesc_initialize_2eproto();
  friend void protobuf_ShutdownFile_initialize_2eproto();

  void InitAsDefaultInstance();
  static BINInitializeRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINInitializeResponse : public ::google::protobuf::Message {
 public:
  BINInitializeResponse();
  virtual ~BINInitializeResponse();

  BINInitializeResponse(const BINInitializeResponse& from);

  inline BINInitializeResponse& operator=(const BINInitializeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINInitializeResponse& default_instance();

  void Swap(BINInitializeResponse* other);

  // implements Message ----------------------------------------------

  BINInitializeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINInitializeResponse& from);
  void MergeFrom(const BINInitializeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional string currentAppVersion = 3;
  inline bool has_currentappversion() const;
  inline void clear_currentappversion();
  static const int kCurrentAppVersionFieldNumber = 3;
  inline const ::std::string& currentappversion() const;
  inline void set_currentappversion(const ::std::string& value);
  inline void set_currentappversion(const char* value);
  inline void set_currentappversion(const char* value, size_t size);
  inline ::std::string* mutable_currentappversion();
  inline ::std::string* release_currentappversion();
  inline void set_allocated_currentappversion(::std::string* currentappversion);

  // optional string downloadUrl = 4;
  inline bool has_downloadurl() const;
  inline void clear_downloadurl();
  static const int kDownloadUrlFieldNumber = 4;
  inline const ::std::string& downloadurl() const;
  inline void set_downloadurl(const ::std::string& value);
  inline void set_downloadurl(const char* value);
  inline void set_downloadurl(const char* value, size_t size);
  inline ::std::string* mutable_downloadurl();
  inline ::std::string* release_downloadurl();
  inline void set_allocated_downloadurl(::std::string* downloadurl);

  // optional string cashCurrency = 5;
  inline bool has_cashcurrency() const;
  inline void clear_cashcurrency();
  static const int kCashCurrencyFieldNumber = 5;
  inline const ::std::string& cashcurrency() const;
  inline void set_cashcurrency(const ::std::string& value);
  inline void set_cashcurrency(const char* value);
  inline void set_cashcurrency(const char* value, size_t size);
  inline ::std::string* mutable_cashcurrency();
  inline ::std::string* release_cashcurrency();
  inline void set_allocated_cashcurrency(::std::string* cashcurrency);

  // optional string goldCurrency = 6;
  inline bool has_goldcurrency() const;
  inline void clear_goldcurrency();
  static const int kGoldCurrencyFieldNumber = 6;
  inline const ::std::string& goldcurrency() const;
  inline void set_goldcurrency(const ::std::string& value);
  inline void set_goldcurrency(const char* value);
  inline void set_goldcurrency(const char* value, size_t size);
  inline ::std::string* mutable_goldcurrency();
  inline ::std::string* release_goldcurrency();
  inline void set_allocated_goldcurrency(::std::string* goldcurrency);

  // optional bool forceUpdate = 7;
  inline bool has_forceupdate() const;
  inline void clear_forceupdate();
  static const int kForceUpdateFieldNumber = 7;
  inline bool forceupdate() const;
  inline void set_forceupdate(bool value);

  // optional bool enableQuickPlay = 8;
  inline bool has_enablequickplay() const;
  inline void clear_enablequickplay();
  static const int kEnableQuickPlayFieldNumber = 8;
  inline bool enablequickplay() const;
  inline void set_enablequickplay(bool value);

  // optional bool enableCashSystem = 9;
  inline bool has_enablecashsystem() const;
  inline void clear_enablecashsystem();
  static const int kEnableCashSystemFieldNumber = 9;
  inline bool enablecashsystem() const;
  inline void set_enablecashsystem(bool value);

  // optional bool enablePurchaseCash = 10;
  inline bool has_enablepurchasecash() const;
  inline void clear_enablepurchasecash();
  static const int kEnablePurchaseCashFieldNumber = 10;
  inline bool enablepurchasecash() const;
  inline void set_enablepurchasecash(bool value);

  // optional bool enableTopup = 11;
  inline bool has_enabletopup() const;
  inline void clear_enabletopup();
  static const int kEnableTopupFieldNumber = 11;
  inline bool enabletopup() const;
  inline void set_enabletopup(bool value);

  // optional bool enableCashToGold = 12;
  inline bool has_enablecashtogold() const;
  inline void clear_enablecashtogold();
  static const int kEnableCashToGoldFieldNumber = 12;
  inline bool enablecashtogold() const;
  inline void set_enablecashtogold(bool value);

  // optional bool enableCashTransfer = 13;
  inline bool has_enablecashtransfer() const;
  inline void clear_enablecashtransfer();
  static const int kEnableCashTransferFieldNumber = 13;
  inline bool enablecashtransfer() const;
  inline void set_enablecashtransfer(bool value);

  // optional bool enableGiftCode = 14;
  inline bool has_enablegiftcode() const;
  inline void clear_enablegiftcode();
  static const int kEnableGiftCodeFieldNumber = 14;
  inline bool enablegiftcode() const;
  inline void set_enablegiftcode(bool value);

  // optional int32 cashToGoldRatio = 15;
  inline bool has_cashtogoldratio() const;
  inline void clear_cashtogoldratio();
  static const int kCashToGoldRatioFieldNumber = 15;
  inline ::google::protobuf::int32 cashtogoldratio() const;
  inline void set_cashtogoldratio(::google::protobuf::int32 value);

  // repeated string hotlines = 16;
  inline int hotlines_size() const;
  inline void clear_hotlines();
  static const int kHotlinesFieldNumber = 16;
  inline const ::std::string& hotlines(int index) const;
  inline ::std::string* mutable_hotlines(int index);
  inline void set_hotlines(int index, const ::std::string& value);
  inline void set_hotlines(int index, const char* value);
  inline void set_hotlines(int index, const char* value, size_t size);
  inline ::std::string* add_hotlines();
  inline void add_hotlines(const ::std::string& value);
  inline void add_hotlines(const char* value);
  inline void add_hotlines(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& hotlines() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hotlines();

  // optional string fanpageUrl = 17;
  inline bool has_fanpageurl() const;
  inline void clear_fanpageurl();
  static const int kFanpageUrlFieldNumber = 17;
  inline const ::std::string& fanpageurl() const;
  inline void set_fanpageurl(const ::std::string& value);
  inline void set_fanpageurl(const char* value);
  inline void set_fanpageurl(const char* value, size_t size);
  inline ::std::string* mutable_fanpageurl();
  inline ::std::string* release_fanpageurl();
  inline void set_allocated_fanpageurl(::std::string* fanpageurl);

  // optional string websiteUrl = 18;
  inline bool has_websiteurl() const;
  inline void clear_websiteurl();
  static const int kWebsiteUrlFieldNumber = 18;
  inline const ::std::string& websiteurl() const;
  inline void set_websiteurl(const ::std::string& value);
  inline void set_websiteurl(const char* value);
  inline void set_websiteurl(const char* value, size_t size);
  inline ::std::string* mutable_websiteurl();
  inline ::std::string* release_websiteurl();
  inline void set_allocated_websiteurl(::std::string* websiteurl);

  // repeated int32 enableGameIds = 19;
  inline int enablegameids_size() const;
  inline void clear_enablegameids();
  static const int kEnableGameIdsFieldNumber = 19;
  inline ::google::protobuf::int32 enablegameids(int index) const;
  inline void set_enablegameids(int index, ::google::protobuf::int32 value);
  inline void add_enablegameids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      enablegameids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_enablegameids();

  // optional string resetPwSmsSyntax = 20;
  inline bool has_resetpwsmssyntax() const;
  inline void clear_resetpwsmssyntax();
  static const int kResetPwSmsSyntaxFieldNumber = 20;
  inline const ::std::string& resetpwsmssyntax() const;
  inline void set_resetpwsmssyntax(const ::std::string& value);
  inline void set_resetpwsmssyntax(const char* value);
  inline void set_resetpwsmssyntax(const char* value, size_t size);
  inline ::std::string* mutable_resetpwsmssyntax();
  inline ::std::string* release_resetpwsmssyntax();
  inline void set_allocated_resetpwsmssyntax(::std::string* resetpwsmssyntax);

  // @@protoc_insertion_point(class_scope:BINInitializeResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_currentappversion();
  inline void clear_has_currentappversion();
  inline void set_has_downloadurl();
  inline void clear_has_downloadurl();
  inline void set_has_cashcurrency();
  inline void clear_has_cashcurrency();
  inline void set_has_goldcurrency();
  inline void clear_has_goldcurrency();
  inline void set_has_forceupdate();
  inline void clear_has_forceupdate();
  inline void set_has_enablequickplay();
  inline void clear_has_enablequickplay();
  inline void set_has_enablecashsystem();
  inline void clear_has_enablecashsystem();
  inline void set_has_enablepurchasecash();
  inline void clear_has_enablepurchasecash();
  inline void set_has_enabletopup();
  inline void clear_has_enabletopup();
  inline void set_has_enablecashtogold();
  inline void clear_has_enablecashtogold();
  inline void set_has_enablecashtransfer();
  inline void clear_has_enablecashtransfer();
  inline void set_has_enablegiftcode();
  inline void clear_has_enablegiftcode();
  inline void set_has_cashtogoldratio();
  inline void clear_has_cashtogoldratio();
  inline void set_has_fanpageurl();
  inline void clear_has_fanpageurl();
  inline void set_has_websiteurl();
  inline void clear_has_websiteurl();
  inline void set_has_resetpwsmssyntax();
  inline void clear_has_resetpwsmssyntax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::std::string* currentappversion_;
  ::std::string* downloadurl_;
  ::std::string* cashcurrency_;
  ::std::string* goldcurrency_;
  bool responsecode_;
  bool forceupdate_;
  bool enablequickplay_;
  bool enablecashsystem_;
  bool enablepurchasecash_;
  bool enabletopup_;
  bool enablecashtogold_;
  bool enablecashtransfer_;
  bool enablegiftcode_;
  ::google::protobuf::int32 cashtogoldratio_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hotlines_;
  ::std::string* fanpageurl_;
  ::std::string* websiteurl_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > enablegameids_;
  ::std::string* resetpwsmssyntax_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_initialize_2eproto();
  friend void protobuf_AssignDesc_initialize_2eproto();
  friend void protobuf_ShutdownFile_initialize_2eproto();

  void InitAsDefaultInstance();
  static BINInitializeResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINInitializeRequest

// required string cp = 1;
inline bool BINInitializeRequest::has_cp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINInitializeRequest::set_has_cp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINInitializeRequest::clear_has_cp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINInitializeRequest::clear_cp() {
  if (cp_ != &::google::protobuf::internal::kEmptyString) {
    cp_->clear();
  }
  clear_has_cp();
}
inline const ::std::string& BINInitializeRequest::cp() const {
  return *cp_;
}
inline void BINInitializeRequest::set_cp(const ::std::string& value) {
  set_has_cp();
  if (cp_ == &::google::protobuf::internal::kEmptyString) {
    cp_ = new ::std::string;
  }
  cp_->assign(value);
}
inline void BINInitializeRequest::set_cp(const char* value) {
  set_has_cp();
  if (cp_ == &::google::protobuf::internal::kEmptyString) {
    cp_ = new ::std::string;
  }
  cp_->assign(value);
}
inline void BINInitializeRequest::set_cp(const char* value, size_t size) {
  set_has_cp();
  if (cp_ == &::google::protobuf::internal::kEmptyString) {
    cp_ = new ::std::string;
  }
  cp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeRequest::mutable_cp() {
  set_has_cp();
  if (cp_ == &::google::protobuf::internal::kEmptyString) {
    cp_ = new ::std::string;
  }
  return cp_;
}
inline ::std::string* BINInitializeRequest::release_cp() {
  clear_has_cp();
  if (cp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cp_;
    cp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeRequest::set_allocated_cp(::std::string* cp) {
  if (cp_ != &::google::protobuf::internal::kEmptyString) {
    delete cp_;
  }
  if (cp) {
    set_has_cp();
    cp_ = cp;
  } else {
    clear_has_cp();
    cp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string appVersion = 2;
inline bool BINInitializeRequest::has_appversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINInitializeRequest::set_has_appversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINInitializeRequest::clear_has_appversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINInitializeRequest::clear_appversion() {
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    appversion_->clear();
  }
  clear_has_appversion();
}
inline const ::std::string& BINInitializeRequest::appversion() const {
  return *appversion_;
}
inline void BINInitializeRequest::set_appversion(const ::std::string& value) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(value);
}
inline void BINInitializeRequest::set_appversion(const char* value) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(value);
}
inline void BINInitializeRequest::set_appversion(const char* value, size_t size) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeRequest::mutable_appversion() {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  return appversion_;
}
inline ::std::string* BINInitializeRequest::release_appversion() {
  clear_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appversion_;
    appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeRequest::set_allocated_appversion(::std::string* appversion) {
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    delete appversion_;
  }
  if (appversion) {
    set_has_appversion();
    appversion_ = appversion;
  } else {
    clear_has_appversion();
    appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceId = 3;
inline bool BINInitializeRequest::has_deviceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINInitializeRequest::set_has_deviceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINInitializeRequest::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINInitializeRequest::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& BINInitializeRequest::deviceid() const {
  return *deviceid_;
}
inline void BINInitializeRequest::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void BINInitializeRequest::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void BINInitializeRequest::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeRequest::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* BINInitializeRequest::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceInfo = 4;
inline bool BINInitializeRequest::has_deviceinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINInitializeRequest::set_has_deviceinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINInitializeRequest::clear_has_deviceinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINInitializeRequest::clear_deviceinfo() {
  if (deviceinfo_ != &::google::protobuf::internal::kEmptyString) {
    deviceinfo_->clear();
  }
  clear_has_deviceinfo();
}
inline const ::std::string& BINInitializeRequest::deviceinfo() const {
  return *deviceinfo_;
}
inline void BINInitializeRequest::set_deviceinfo(const ::std::string& value) {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::kEmptyString) {
    deviceinfo_ = new ::std::string;
  }
  deviceinfo_->assign(value);
}
inline void BINInitializeRequest::set_deviceinfo(const char* value) {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::kEmptyString) {
    deviceinfo_ = new ::std::string;
  }
  deviceinfo_->assign(value);
}
inline void BINInitializeRequest::set_deviceinfo(const char* value, size_t size) {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::kEmptyString) {
    deviceinfo_ = new ::std::string;
  }
  deviceinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeRequest::mutable_deviceinfo() {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::kEmptyString) {
    deviceinfo_ = new ::std::string;
  }
  return deviceinfo_;
}
inline ::std::string* BINInitializeRequest::release_deviceinfo() {
  clear_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceinfo_;
    deviceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeRequest::set_allocated_deviceinfo(::std::string* deviceinfo) {
  if (deviceinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceinfo_;
  }
  if (deviceinfo) {
    set_has_deviceinfo();
    deviceinfo_ = deviceinfo;
  } else {
    clear_has_deviceinfo();
    deviceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string country = 5;
inline bool BINInitializeRequest::has_country() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINInitializeRequest::set_has_country() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINInitializeRequest::clear_has_country() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINInitializeRequest::clear_country() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& BINInitializeRequest::country() const {
  return *country_;
}
inline void BINInitializeRequest::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void BINInitializeRequest::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void BINInitializeRequest::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeRequest::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  return country_;
}
inline ::std::string* BINInitializeRequest::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeRequest::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string language = 6;
inline bool BINInitializeRequest::has_language() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINInitializeRequest::set_has_language() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINInitializeRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINInitializeRequest::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& BINInitializeRequest::language() const {
  return *language_;
}
inline void BINInitializeRequest::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void BINInitializeRequest::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void BINInitializeRequest::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeRequest::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* BINInitializeRequest::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeRequest::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pakageName = 7;
inline bool BINInitializeRequest::has_pakagename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BINInitializeRequest::set_has_pakagename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BINInitializeRequest::clear_has_pakagename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BINInitializeRequest::clear_pakagename() {
  if (pakagename_ != &::google::protobuf::internal::kEmptyString) {
    pakagename_->clear();
  }
  clear_has_pakagename();
}
inline const ::std::string& BINInitializeRequest::pakagename() const {
  return *pakagename_;
}
inline void BINInitializeRequest::set_pakagename(const ::std::string& value) {
  set_has_pakagename();
  if (pakagename_ == &::google::protobuf::internal::kEmptyString) {
    pakagename_ = new ::std::string;
  }
  pakagename_->assign(value);
}
inline void BINInitializeRequest::set_pakagename(const char* value) {
  set_has_pakagename();
  if (pakagename_ == &::google::protobuf::internal::kEmptyString) {
    pakagename_ = new ::std::string;
  }
  pakagename_->assign(value);
}
inline void BINInitializeRequest::set_pakagename(const char* value, size_t size) {
  set_has_pakagename();
  if (pakagename_ == &::google::protobuf::internal::kEmptyString) {
    pakagename_ = new ::std::string;
  }
  pakagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeRequest::mutable_pakagename() {
  set_has_pakagename();
  if (pakagename_ == &::google::protobuf::internal::kEmptyString) {
    pakagename_ = new ::std::string;
  }
  return pakagename_;
}
inline ::std::string* BINInitializeRequest::release_pakagename() {
  clear_has_pakagename();
  if (pakagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pakagename_;
    pakagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeRequest::set_allocated_pakagename(::std::string* pakagename) {
  if (pakagename_ != &::google::protobuf::internal::kEmptyString) {
    delete pakagename_;
  }
  if (pakagename) {
    set_has_pakagename();
    pakagename_ = pakagename;
  } else {
    clear_has_pakagename();
    pakagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BINInitializeResponse

// required bool responseCode = 1;
inline bool BINInitializeResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINInitializeResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINInitializeResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINInitializeResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINInitializeResponse::responsecode() const {
  return responsecode_;
}
inline void BINInitializeResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINInitializeResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINInitializeResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINInitializeResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINInitializeResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINInitializeResponse::message() const {
  return *message_;
}
inline void BINInitializeResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINInitializeResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINInitializeResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINInitializeResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string currentAppVersion = 3;
inline bool BINInitializeResponse::has_currentappversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINInitializeResponse::set_has_currentappversion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINInitializeResponse::clear_has_currentappversion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINInitializeResponse::clear_currentappversion() {
  if (currentappversion_ != &::google::protobuf::internal::kEmptyString) {
    currentappversion_->clear();
  }
  clear_has_currentappversion();
}
inline const ::std::string& BINInitializeResponse::currentappversion() const {
  return *currentappversion_;
}
inline void BINInitializeResponse::set_currentappversion(const ::std::string& value) {
  set_has_currentappversion();
  if (currentappversion_ == &::google::protobuf::internal::kEmptyString) {
    currentappversion_ = new ::std::string;
  }
  currentappversion_->assign(value);
}
inline void BINInitializeResponse::set_currentappversion(const char* value) {
  set_has_currentappversion();
  if (currentappversion_ == &::google::protobuf::internal::kEmptyString) {
    currentappversion_ = new ::std::string;
  }
  currentappversion_->assign(value);
}
inline void BINInitializeResponse::set_currentappversion(const char* value, size_t size) {
  set_has_currentappversion();
  if (currentappversion_ == &::google::protobuf::internal::kEmptyString) {
    currentappversion_ = new ::std::string;
  }
  currentappversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeResponse::mutable_currentappversion() {
  set_has_currentappversion();
  if (currentappversion_ == &::google::protobuf::internal::kEmptyString) {
    currentappversion_ = new ::std::string;
  }
  return currentappversion_;
}
inline ::std::string* BINInitializeResponse::release_currentappversion() {
  clear_has_currentappversion();
  if (currentappversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = currentappversion_;
    currentappversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeResponse::set_allocated_currentappversion(::std::string* currentappversion) {
  if (currentappversion_ != &::google::protobuf::internal::kEmptyString) {
    delete currentappversion_;
  }
  if (currentappversion) {
    set_has_currentappversion();
    currentappversion_ = currentappversion;
  } else {
    clear_has_currentappversion();
    currentappversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string downloadUrl = 4;
inline bool BINInitializeResponse::has_downloadurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINInitializeResponse::set_has_downloadurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINInitializeResponse::clear_has_downloadurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINInitializeResponse::clear_downloadurl() {
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    downloadurl_->clear();
  }
  clear_has_downloadurl();
}
inline const ::std::string& BINInitializeResponse::downloadurl() const {
  return *downloadurl_;
}
inline void BINInitializeResponse::set_downloadurl(const ::std::string& value) {
  set_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    downloadurl_ = new ::std::string;
  }
  downloadurl_->assign(value);
}
inline void BINInitializeResponse::set_downloadurl(const char* value) {
  set_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    downloadurl_ = new ::std::string;
  }
  downloadurl_->assign(value);
}
inline void BINInitializeResponse::set_downloadurl(const char* value, size_t size) {
  set_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    downloadurl_ = new ::std::string;
  }
  downloadurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeResponse::mutable_downloadurl() {
  set_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    downloadurl_ = new ::std::string;
  }
  return downloadurl_;
}
inline ::std::string* BINInitializeResponse::release_downloadurl() {
  clear_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = downloadurl_;
    downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeResponse::set_allocated_downloadurl(::std::string* downloadurl) {
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadurl_;
  }
  if (downloadurl) {
    set_has_downloadurl();
    downloadurl_ = downloadurl;
  } else {
    clear_has_downloadurl();
    downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cashCurrency = 5;
inline bool BINInitializeResponse::has_cashcurrency() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINInitializeResponse::set_has_cashcurrency() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINInitializeResponse::clear_has_cashcurrency() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINInitializeResponse::clear_cashcurrency() {
  if (cashcurrency_ != &::google::protobuf::internal::kEmptyString) {
    cashcurrency_->clear();
  }
  clear_has_cashcurrency();
}
inline const ::std::string& BINInitializeResponse::cashcurrency() const {
  return *cashcurrency_;
}
inline void BINInitializeResponse::set_cashcurrency(const ::std::string& value) {
  set_has_cashcurrency();
  if (cashcurrency_ == &::google::protobuf::internal::kEmptyString) {
    cashcurrency_ = new ::std::string;
  }
  cashcurrency_->assign(value);
}
inline void BINInitializeResponse::set_cashcurrency(const char* value) {
  set_has_cashcurrency();
  if (cashcurrency_ == &::google::protobuf::internal::kEmptyString) {
    cashcurrency_ = new ::std::string;
  }
  cashcurrency_->assign(value);
}
inline void BINInitializeResponse::set_cashcurrency(const char* value, size_t size) {
  set_has_cashcurrency();
  if (cashcurrency_ == &::google::protobuf::internal::kEmptyString) {
    cashcurrency_ = new ::std::string;
  }
  cashcurrency_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeResponse::mutable_cashcurrency() {
  set_has_cashcurrency();
  if (cashcurrency_ == &::google::protobuf::internal::kEmptyString) {
    cashcurrency_ = new ::std::string;
  }
  return cashcurrency_;
}
inline ::std::string* BINInitializeResponse::release_cashcurrency() {
  clear_has_cashcurrency();
  if (cashcurrency_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cashcurrency_;
    cashcurrency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeResponse::set_allocated_cashcurrency(::std::string* cashcurrency) {
  if (cashcurrency_ != &::google::protobuf::internal::kEmptyString) {
    delete cashcurrency_;
  }
  if (cashcurrency) {
    set_has_cashcurrency();
    cashcurrency_ = cashcurrency;
  } else {
    clear_has_cashcurrency();
    cashcurrency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string goldCurrency = 6;
inline bool BINInitializeResponse::has_goldcurrency() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINInitializeResponse::set_has_goldcurrency() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINInitializeResponse::clear_has_goldcurrency() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINInitializeResponse::clear_goldcurrency() {
  if (goldcurrency_ != &::google::protobuf::internal::kEmptyString) {
    goldcurrency_->clear();
  }
  clear_has_goldcurrency();
}
inline const ::std::string& BINInitializeResponse::goldcurrency() const {
  return *goldcurrency_;
}
inline void BINInitializeResponse::set_goldcurrency(const ::std::string& value) {
  set_has_goldcurrency();
  if (goldcurrency_ == &::google::protobuf::internal::kEmptyString) {
    goldcurrency_ = new ::std::string;
  }
  goldcurrency_->assign(value);
}
inline void BINInitializeResponse::set_goldcurrency(const char* value) {
  set_has_goldcurrency();
  if (goldcurrency_ == &::google::protobuf::internal::kEmptyString) {
    goldcurrency_ = new ::std::string;
  }
  goldcurrency_->assign(value);
}
inline void BINInitializeResponse::set_goldcurrency(const char* value, size_t size) {
  set_has_goldcurrency();
  if (goldcurrency_ == &::google::protobuf::internal::kEmptyString) {
    goldcurrency_ = new ::std::string;
  }
  goldcurrency_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeResponse::mutable_goldcurrency() {
  set_has_goldcurrency();
  if (goldcurrency_ == &::google::protobuf::internal::kEmptyString) {
    goldcurrency_ = new ::std::string;
  }
  return goldcurrency_;
}
inline ::std::string* BINInitializeResponse::release_goldcurrency() {
  clear_has_goldcurrency();
  if (goldcurrency_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = goldcurrency_;
    goldcurrency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeResponse::set_allocated_goldcurrency(::std::string* goldcurrency) {
  if (goldcurrency_ != &::google::protobuf::internal::kEmptyString) {
    delete goldcurrency_;
  }
  if (goldcurrency) {
    set_has_goldcurrency();
    goldcurrency_ = goldcurrency;
  } else {
    clear_has_goldcurrency();
    goldcurrency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool forceUpdate = 7;
inline bool BINInitializeResponse::has_forceupdate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BINInitializeResponse::set_has_forceupdate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BINInitializeResponse::clear_has_forceupdate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BINInitializeResponse::clear_forceupdate() {
  forceupdate_ = false;
  clear_has_forceupdate();
}
inline bool BINInitializeResponse::forceupdate() const {
  return forceupdate_;
}
inline void BINInitializeResponse::set_forceupdate(bool value) {
  set_has_forceupdate();
  forceupdate_ = value;
}

// optional bool enableQuickPlay = 8;
inline bool BINInitializeResponse::has_enablequickplay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BINInitializeResponse::set_has_enablequickplay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BINInitializeResponse::clear_has_enablequickplay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BINInitializeResponse::clear_enablequickplay() {
  enablequickplay_ = false;
  clear_has_enablequickplay();
}
inline bool BINInitializeResponse::enablequickplay() const {
  return enablequickplay_;
}
inline void BINInitializeResponse::set_enablequickplay(bool value) {
  set_has_enablequickplay();
  enablequickplay_ = value;
}

// optional bool enableCashSystem = 9;
inline bool BINInitializeResponse::has_enablecashsystem() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BINInitializeResponse::set_has_enablecashsystem() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BINInitializeResponse::clear_has_enablecashsystem() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BINInitializeResponse::clear_enablecashsystem() {
  enablecashsystem_ = false;
  clear_has_enablecashsystem();
}
inline bool BINInitializeResponse::enablecashsystem() const {
  return enablecashsystem_;
}
inline void BINInitializeResponse::set_enablecashsystem(bool value) {
  set_has_enablecashsystem();
  enablecashsystem_ = value;
}

// optional bool enablePurchaseCash = 10;
inline bool BINInitializeResponse::has_enablepurchasecash() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BINInitializeResponse::set_has_enablepurchasecash() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BINInitializeResponse::clear_has_enablepurchasecash() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BINInitializeResponse::clear_enablepurchasecash() {
  enablepurchasecash_ = false;
  clear_has_enablepurchasecash();
}
inline bool BINInitializeResponse::enablepurchasecash() const {
  return enablepurchasecash_;
}
inline void BINInitializeResponse::set_enablepurchasecash(bool value) {
  set_has_enablepurchasecash();
  enablepurchasecash_ = value;
}

// optional bool enableTopup = 11;
inline bool BINInitializeResponse::has_enabletopup() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BINInitializeResponse::set_has_enabletopup() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BINInitializeResponse::clear_has_enabletopup() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BINInitializeResponse::clear_enabletopup() {
  enabletopup_ = false;
  clear_has_enabletopup();
}
inline bool BINInitializeResponse::enabletopup() const {
  return enabletopup_;
}
inline void BINInitializeResponse::set_enabletopup(bool value) {
  set_has_enabletopup();
  enabletopup_ = value;
}

// optional bool enableCashToGold = 12;
inline bool BINInitializeResponse::has_enablecashtogold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BINInitializeResponse::set_has_enablecashtogold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BINInitializeResponse::clear_has_enablecashtogold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BINInitializeResponse::clear_enablecashtogold() {
  enablecashtogold_ = false;
  clear_has_enablecashtogold();
}
inline bool BINInitializeResponse::enablecashtogold() const {
  return enablecashtogold_;
}
inline void BINInitializeResponse::set_enablecashtogold(bool value) {
  set_has_enablecashtogold();
  enablecashtogold_ = value;
}

// optional bool enableCashTransfer = 13;
inline bool BINInitializeResponse::has_enablecashtransfer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BINInitializeResponse::set_has_enablecashtransfer() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BINInitializeResponse::clear_has_enablecashtransfer() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BINInitializeResponse::clear_enablecashtransfer() {
  enablecashtransfer_ = false;
  clear_has_enablecashtransfer();
}
inline bool BINInitializeResponse::enablecashtransfer() const {
  return enablecashtransfer_;
}
inline void BINInitializeResponse::set_enablecashtransfer(bool value) {
  set_has_enablecashtransfer();
  enablecashtransfer_ = value;
}

// optional bool enableGiftCode = 14;
inline bool BINInitializeResponse::has_enablegiftcode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BINInitializeResponse::set_has_enablegiftcode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BINInitializeResponse::clear_has_enablegiftcode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BINInitializeResponse::clear_enablegiftcode() {
  enablegiftcode_ = false;
  clear_has_enablegiftcode();
}
inline bool BINInitializeResponse::enablegiftcode() const {
  return enablegiftcode_;
}
inline void BINInitializeResponse::set_enablegiftcode(bool value) {
  set_has_enablegiftcode();
  enablegiftcode_ = value;
}

// optional int32 cashToGoldRatio = 15;
inline bool BINInitializeResponse::has_cashtogoldratio() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BINInitializeResponse::set_has_cashtogoldratio() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BINInitializeResponse::clear_has_cashtogoldratio() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BINInitializeResponse::clear_cashtogoldratio() {
  cashtogoldratio_ = 0;
  clear_has_cashtogoldratio();
}
inline ::google::protobuf::int32 BINInitializeResponse::cashtogoldratio() const {
  return cashtogoldratio_;
}
inline void BINInitializeResponse::set_cashtogoldratio(::google::protobuf::int32 value) {
  set_has_cashtogoldratio();
  cashtogoldratio_ = value;
}

// repeated string hotlines = 16;
inline int BINInitializeResponse::hotlines_size() const {
  return hotlines_.size();
}
inline void BINInitializeResponse::clear_hotlines() {
  hotlines_.Clear();
}
inline const ::std::string& BINInitializeResponse::hotlines(int index) const {
  return hotlines_.Get(index);
}
inline ::std::string* BINInitializeResponse::mutable_hotlines(int index) {
  return hotlines_.Mutable(index);
}
inline void BINInitializeResponse::set_hotlines(int index, const ::std::string& value) {
  hotlines_.Mutable(index)->assign(value);
}
inline void BINInitializeResponse::set_hotlines(int index, const char* value) {
  hotlines_.Mutable(index)->assign(value);
}
inline void BINInitializeResponse::set_hotlines(int index, const char* value, size_t size) {
  hotlines_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeResponse::add_hotlines() {
  return hotlines_.Add();
}
inline void BINInitializeResponse::add_hotlines(const ::std::string& value) {
  hotlines_.Add()->assign(value);
}
inline void BINInitializeResponse::add_hotlines(const char* value) {
  hotlines_.Add()->assign(value);
}
inline void BINInitializeResponse::add_hotlines(const char* value, size_t size) {
  hotlines_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BINInitializeResponse::hotlines() const {
  return hotlines_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BINInitializeResponse::mutable_hotlines() {
  return &hotlines_;
}

// optional string fanpageUrl = 17;
inline bool BINInitializeResponse::has_fanpageurl() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BINInitializeResponse::set_has_fanpageurl() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BINInitializeResponse::clear_has_fanpageurl() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BINInitializeResponse::clear_fanpageurl() {
  if (fanpageurl_ != &::google::protobuf::internal::kEmptyString) {
    fanpageurl_->clear();
  }
  clear_has_fanpageurl();
}
inline const ::std::string& BINInitializeResponse::fanpageurl() const {
  return *fanpageurl_;
}
inline void BINInitializeResponse::set_fanpageurl(const ::std::string& value) {
  set_has_fanpageurl();
  if (fanpageurl_ == &::google::protobuf::internal::kEmptyString) {
    fanpageurl_ = new ::std::string;
  }
  fanpageurl_->assign(value);
}
inline void BINInitializeResponse::set_fanpageurl(const char* value) {
  set_has_fanpageurl();
  if (fanpageurl_ == &::google::protobuf::internal::kEmptyString) {
    fanpageurl_ = new ::std::string;
  }
  fanpageurl_->assign(value);
}
inline void BINInitializeResponse::set_fanpageurl(const char* value, size_t size) {
  set_has_fanpageurl();
  if (fanpageurl_ == &::google::protobuf::internal::kEmptyString) {
    fanpageurl_ = new ::std::string;
  }
  fanpageurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeResponse::mutable_fanpageurl() {
  set_has_fanpageurl();
  if (fanpageurl_ == &::google::protobuf::internal::kEmptyString) {
    fanpageurl_ = new ::std::string;
  }
  return fanpageurl_;
}
inline ::std::string* BINInitializeResponse::release_fanpageurl() {
  clear_has_fanpageurl();
  if (fanpageurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fanpageurl_;
    fanpageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeResponse::set_allocated_fanpageurl(::std::string* fanpageurl) {
  if (fanpageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete fanpageurl_;
  }
  if (fanpageurl) {
    set_has_fanpageurl();
    fanpageurl_ = fanpageurl;
  } else {
    clear_has_fanpageurl();
    fanpageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string websiteUrl = 18;
inline bool BINInitializeResponse::has_websiteurl() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BINInitializeResponse::set_has_websiteurl() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BINInitializeResponse::clear_has_websiteurl() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BINInitializeResponse::clear_websiteurl() {
  if (websiteurl_ != &::google::protobuf::internal::kEmptyString) {
    websiteurl_->clear();
  }
  clear_has_websiteurl();
}
inline const ::std::string& BINInitializeResponse::websiteurl() const {
  return *websiteurl_;
}
inline void BINInitializeResponse::set_websiteurl(const ::std::string& value) {
  set_has_websiteurl();
  if (websiteurl_ == &::google::protobuf::internal::kEmptyString) {
    websiteurl_ = new ::std::string;
  }
  websiteurl_->assign(value);
}
inline void BINInitializeResponse::set_websiteurl(const char* value) {
  set_has_websiteurl();
  if (websiteurl_ == &::google::protobuf::internal::kEmptyString) {
    websiteurl_ = new ::std::string;
  }
  websiteurl_->assign(value);
}
inline void BINInitializeResponse::set_websiteurl(const char* value, size_t size) {
  set_has_websiteurl();
  if (websiteurl_ == &::google::protobuf::internal::kEmptyString) {
    websiteurl_ = new ::std::string;
  }
  websiteurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeResponse::mutable_websiteurl() {
  set_has_websiteurl();
  if (websiteurl_ == &::google::protobuf::internal::kEmptyString) {
    websiteurl_ = new ::std::string;
  }
  return websiteurl_;
}
inline ::std::string* BINInitializeResponse::release_websiteurl() {
  clear_has_websiteurl();
  if (websiteurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = websiteurl_;
    websiteurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeResponse::set_allocated_websiteurl(::std::string* websiteurl) {
  if (websiteurl_ != &::google::protobuf::internal::kEmptyString) {
    delete websiteurl_;
  }
  if (websiteurl) {
    set_has_websiteurl();
    websiteurl_ = websiteurl;
  } else {
    clear_has_websiteurl();
    websiteurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 enableGameIds = 19;
inline int BINInitializeResponse::enablegameids_size() const {
  return enablegameids_.size();
}
inline void BINInitializeResponse::clear_enablegameids() {
  enablegameids_.Clear();
}
inline ::google::protobuf::int32 BINInitializeResponse::enablegameids(int index) const {
  return enablegameids_.Get(index);
}
inline void BINInitializeResponse::set_enablegameids(int index, ::google::protobuf::int32 value) {
  enablegameids_.Set(index, value);
}
inline void BINInitializeResponse::add_enablegameids(::google::protobuf::int32 value) {
  enablegameids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BINInitializeResponse::enablegameids() const {
  return enablegameids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BINInitializeResponse::mutable_enablegameids() {
  return &enablegameids_;
}

// optional string resetPwSmsSyntax = 20;
inline bool BINInitializeResponse::has_resetpwsmssyntax() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BINInitializeResponse::set_has_resetpwsmssyntax() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BINInitializeResponse::clear_has_resetpwsmssyntax() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BINInitializeResponse::clear_resetpwsmssyntax() {
  if (resetpwsmssyntax_ != &::google::protobuf::internal::kEmptyString) {
    resetpwsmssyntax_->clear();
  }
  clear_has_resetpwsmssyntax();
}
inline const ::std::string& BINInitializeResponse::resetpwsmssyntax() const {
  return *resetpwsmssyntax_;
}
inline void BINInitializeResponse::set_resetpwsmssyntax(const ::std::string& value) {
  set_has_resetpwsmssyntax();
  if (resetpwsmssyntax_ == &::google::protobuf::internal::kEmptyString) {
    resetpwsmssyntax_ = new ::std::string;
  }
  resetpwsmssyntax_->assign(value);
}
inline void BINInitializeResponse::set_resetpwsmssyntax(const char* value) {
  set_has_resetpwsmssyntax();
  if (resetpwsmssyntax_ == &::google::protobuf::internal::kEmptyString) {
    resetpwsmssyntax_ = new ::std::string;
  }
  resetpwsmssyntax_->assign(value);
}
inline void BINInitializeResponse::set_resetpwsmssyntax(const char* value, size_t size) {
  set_has_resetpwsmssyntax();
  if (resetpwsmssyntax_ == &::google::protobuf::internal::kEmptyString) {
    resetpwsmssyntax_ = new ::std::string;
  }
  resetpwsmssyntax_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINInitializeResponse::mutable_resetpwsmssyntax() {
  set_has_resetpwsmssyntax();
  if (resetpwsmssyntax_ == &::google::protobuf::internal::kEmptyString) {
    resetpwsmssyntax_ = new ::std::string;
  }
  return resetpwsmssyntax_;
}
inline ::std::string* BINInitializeResponse::release_resetpwsmssyntax() {
  clear_has_resetpwsmssyntax();
  if (resetpwsmssyntax_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resetpwsmssyntax_;
    resetpwsmssyntax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINInitializeResponse::set_allocated_resetpwsmssyntax(::std::string* resetpwsmssyntax) {
  if (resetpwsmssyntax_ != &::google::protobuf::internal::kEmptyString) {
    delete resetpwsmssyntax_;
  }
  if (resetpwsmssyntax) {
    set_has_resetpwsmssyntax();
    resetpwsmssyntax_ = resetpwsmssyntax;
  } else {
    clear_has_resetpwsmssyntax();
    resetpwsmssyntax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_initialize_2eproto__INCLUDED
